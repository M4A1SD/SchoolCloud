# -*- coding: utf-8 -*-
"""targl4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yP0BOr-gLarmVuR4jY0Unj_FZb93mxvc
"""

# -*- coding: utf-8 -*-
"""Cars_DB.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vX90dk7RUqXPNgH-kMnnTPhtwSaDCRUs
"""

url = 'https://data.gov.il/api/3/action/datastore_search?resource_id=053cea08-09bc-40ec-8f7a-156f0677aff3'

import requests
import pandas as pd
pd.set_option("display.max_columns", None)

response = requests.get(url)
data = response.json()
df = pd.DataFrame(data)

data_df = pd.DataFrame(data['result']['records'])

data_df.head()

# Import necessary libraries
from ipywidgets import widgets, VBox, interact, Output
from IPython.display import display
output_area = Output()

# Create widgets
tozeret_nm_dropdown = widgets.Dropdown(
    options=[''] + sorted(data_df['tozeret_nm'].unique().tolist()),
    description='Tozeret:',
    style={'description_width': 'initial'}
)

kinuy_mishari_dropdown = widgets.Dropdown(
    options=[''],
    description='Kinuy Mishari:',
    style={'description_width': 'initial'}
)

# Function to update the second dropdown based on the selection of the first
def update_kinuy_mishari_options(change):
    if change['new']:  # Check if a valid option is selected
        filtered_values = data_df[data_df['tozeret_nm'] == change['new']]['kinuy_mishari'].unique()
        kinuy_mishari_dropdown.options = [''] + sorted(filtered_values)
    else:
        kinuy_mishari_dropdown.options = ['']

# Function to update the output area with the total records and unique 'ramat_gimur' values
def update_output(change=None):
    output_area.clear_output()
    selected_tozeret = tozeret_nm_dropdown.value
    selected_kinuy = kinuy_mishari_dropdown.value

    if selected_tozeret and selected_kinuy:
        filtered_df = data_df[
            (data_df['tozeret_nm'] == selected_tozeret) &
            (data_df['kinuy_mishari'] == selected_kinuy)
        ]
        total_records = len(filtered_df)
        unique_ramat_gimur = filtered_df['ramat_gimur'].unique()

        with output_area:
            print(f"Total Records: {total_records}")
            print(f"Unique Ramat Gimur: {', '.join(unique_ramat_gimur) if len(unique_ramat_gimur) > 0 else 'None'}")
    else:
        with output_area:
            print("Please select valid options for both dropdowns.")

# Observe changes in both dropdowns
tozeret_nm_dropdown.observe(update_kinuy_mishari_options, names='value')
kinuy_mishari_dropdown.observe(update_output, names='value')

# Display widgets and output area
display(VBox([tozeret_nm_dropdown, kinuy_mishari_dropdown, output_area]))

data_df.head()

"""1 table
2 grapgh by age
3

extra

"""

import pandas as pd
import requests
import ipywidgets as widgets
from IPython.display import display
import matplotlib.pyplot as plt
import seaborn as sns

# URL of the data
url = 'https://data.gov.il/api/3/action/datastore_search?resource_id=053cea08-09bc-40ec-8f7a-156f0677aff3'

# Fetch the data from the URL
response = requests.get(url)

# Check if the request was successful
if response.status_code == 200:
    data = response.json()
    # Extract records from the JSON response
    records = data['result']['records']

    # Create a DataFrame from the records
    df = pd.DataFrame(records)
else:
    print(f"Failed to retrieve data. Status code: {response.status_code}")

# Tab 1: Data Overview + Chart
tab1_content = widgets.Output()
with tab1_content:
    print("Data Overview:")
    display(df.describe())  # Summary statistics

    # Create a bar plot for the 'Age' distribution
    plt.figure(figsize=(8, 6))
    sns.histplot(df['shnat_yitzur'], kde=True, color='blue', bins=25)
    plt.title('Distribution of Age')
    plt.xlabel('shnat_yitzur')
    plt.ylabel('Frequency')
    plt.show()

# Tab 2: Raw Data + Chart
tab2_content = widgets.Output()
with tab2_content:
    print("Raw Data:")
    display(df)  # Full DataFrame

    # Create a scatter plot showing 'Age' vs 'Gimur'
    plt.figure(figsize=(10, 6))
    sns.boxplot(x='sug_delek_nm', y='zmig_ahori', data=df)
    plt.title('Age Distribution by Gimur')
    plt.xlabel('sug_delek_nm')
    plt.ylabel('zmig_ahori')
    plt.xticks(rotation=45)
    plt.show()

# Tab 3: Additional Chart (Year Count)
tab3_content = widgets.Output()
with tab3_content:
    print("Year Count Chart:")

    # Create a bar chart to show the count of individuals by Gimur
    gimur_counts = df['shnat_yitzur'].value_counts()
    plt.figure(figsize=(8, 6))
    sns.barplot(x=gimur_counts.index, y=gimur_counts.values, palette="viridis")
    plt.title('Count of cars by Year')
    plt.xlabel('Year')
    plt.ylabel('Count')
    plt.xticks(rotation=45)
    plt.show()

# Create Tabs
tabs = widgets.Tab(children=[tab1_content, tab2_content, tab3_content])
tabs.set_title(0, 'Tab 1: Data Overview')
tabs.set_title(1, 'Tab 2: Raw Data')
tabs.set_title(2, 'Tab 3: Year Count')

# Display Tabs
display(tabs)